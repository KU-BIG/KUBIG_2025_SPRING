# -*- coding: utf-8 -*-
"""학과정보_유사도계산.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13IA9uYxdBIJytiz30zA44pUEkdEtlBiO
"""

from sentence_transformers import SentenceTransformer
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
import re

"""#### 데이터 로드 및 전처리"""

result_df = pd.read_csv("/content/drive/MyDrive/업종 클러스터링/강소기업기준_과제_노인일자리_통합.csv", index_col=0)
major_df = pd.read_csv("/content/drive/MyDrive/업종 클러스터링/전국대학별학과정보표준데이터.csv", encoding="cp949")
cluster_table = pd.read_csv("/content/drive/MyDrive/업종 클러스터링/k20_중분류_군집화.csv", index_col=0)

def clean_text(text):
    text = re.sub(r'[^가-힣a-zA-Z\s]', ' ', text)  # 특수문자 제거 + 공백 대체
    text = re.sub(r'\s+', ' ', text)              # 여러 공백 → 하나로
    return text.strip()

result_table = pd.merge(result_df, cluster_table, left_on="업종코드(중)", right_on="중분류_코드", how="left")

result_table = result_table[["기업명", "중분류_코드", "업종명(중)", "주소", "주요생산품목", "모든 과제", "채용횟수", "채용제목", "군집"]]

result_table["채용횟수"].fillna(0, inplace=True)
result_table["모든 과제"].fillna("", inplace=True)
result_table["주요생산품목_모든과제"] = result_table["주요생산품목"] + " " + result_table["모든 과제"]

result_table["주요생산품목_모든과제"] = result_table["주요생산품목_모든과제"].apply(lambda x : clean_text(x))
result_table = result_table[["기업명", "중분류_코드", "업종명(중)", "주소", "주요생산품목_모든과제", "채용횟수", "채용제목", "군집"]]

major_df = major_df[["학과명", "주요교과목명"]]
major_df = major_df[major_df["주요교과목명"].notnull()]

major_df["주요교과목명"] = major_df["주요교과목명"].apply(lambda x : clean_text(x))
major_df = major_df.groupby('학과명')['주요교과목명'].agg(lambda x: ' '.join(x)).reset_index()

alter_txt_embedded = np.load("/content/drive/MyDrive/업종 클러스터링/subject_embedded_vectors.npy")

"""#### 학과 유사도"""

# # 유사도 계산 함수

# def check_similarity(major, corp, embedded_subjects, target_major):
#     target = list(major_df[major_df["학과명"] == target_major]["주요교과목명"])
#     # debugging
#     # print(target)
#     model = SentenceTransformer("snunlp/KR-SBERT-V40K-klueNLI-augSTS")

#     if len(target) == 0:
#         print("학과를 다시 입력하세요")
#         return
#     else:
#         target = target[0]
#         embedded_target = model.encode([target])  # 1개짜리 2D
#         scores = cosine_similarity(embedded_target, embedded_subjects)[0]
#         corp["기준과의_유사도"] = scores
#         corp = corp.sort_values(by="기준과의_유사도", ascending=False)
#         return corp

# 유사도 계산 함수 (최종)

def check_similarity(major, corp, embedded_subjects, target_major, project_info):
    target = list(major_df[major_df["학과명"] == target_major]["주요교과목명"])
    # debugging
    # print(target)
    model = SentenceTransformer("snunlp/KR-SBERT-V40K-klueNLI-augSTS")

    if len(target) == 0:
        print("학과를 다시 입력하세요")
        return
    else:
        major = target[0]
        embedded_major = model.encode([major])
        embedded_project = model.encode([project_info])

        major_scores = cosine_similarity(embedded_major, embedded_subjects)[0]
        project_scores = cosine_similarity(embedded_project, embedded_subjects)[0]

        final_scores = 0.3 * major_scores + 0.7 * project_scores

        corp["전공_유사도"] = major_scores
        corp["프로젝트_유사도"] = project_scores
        corp["최종_유사도"] = final_scores

        corp = corp.sort_values(by="최종_유사도", ascending=False)
        return corp

major_txt_1 = "전자전기공학부"
project_txt_1 = """
UATM/UTM 분야 기술 연구개발
자체연구 외 외부기관 연구 협업 수행
항행안전시설 관련 연구개발사업
사내 ICT 분야 경력 개발 업무
직원 전문역량 강화를 위한 사내 교육 수행
"""

df1 = check_similarity(major_df, result_table, alter_txt_embedded, major_txt_1, project_txt_1)
df1 = df1[df1["채용제목"].notnull()]
df1.to_excel("/content/drive/MyDrive/업종 클러스터링/전자전기공학부_최종.xlsx")

check_similarity(major_df, result_table, alter_txt_embedded, "전자전기공학부").head(20)

check_similarity(major_df, result_table, alter_txt_embedded, "통계학과").head(20)

check_similarity(major_df, result_table, alter_txt_embedded, "체육교육학과").head(20)

check_similarity(major_df, result_table, alter_txt_embedded, "국어국문학과").head(20)

check_similarity(major_df, result_table, alter_txt_embedded, "산업경영공학부").head(20)

# # 모든 과제 텍스트 임베딩한 뒤 numpy 파일로 저장

# model = SentenceTransformer("snunlp/KR-SBERT-V40K-klueNLI-augSTS")
# alter_txt = result_table["주요생산품목_모든과제"].tolist()
# alter_txt_embedded = model.encode(alter_txt)

# np.save("/content/drive/MyDrive/업종 클러스터링/subject_embedded_vectors.npy", alter_txt_embedded)

"""#### 프로젝트 유사도 1 (ko-sbert)"""

from sentence_transformers import SentenceTransformer, util

# 모델 로드
model = SentenceTransformer('jhgan/ko-sbert-nli')

text_list = df["주요생산품목_과제"].tolist()
embedding_file = "/content/drive/MyDrive/KUBIG/25_conference/kosbert_embeddings.npy"

# 임베딩
if os.path.exists(embedding_file):
    ko_project_embeddings = np.load(embedding_file)
else:
    project_embeddings = model.encode(text_list, convert_to_numpy=True)
    np.save(embedding_file, project_embeddings)
    print(embedding_file)

# 프로젝트 유사도
def project_similarity(user_input, project_embeddings, df, top_n = 5):
    user_vector = model.encode(user_input, convert_to_numpy=True)
    similarities = cosine_similarity([user_vector], project_embeddings)[0]

    # 프로젝트 유사도
    df["프로젝트 유사도"] = similarities

    df_sim = df.sort_values("프로젝트 유사도", ascending=False).head(top_n)[["기업명", "주요생산품목_과제", "프로젝트 유사도", "채용횟수_정규화", "채용횟수", "유사도"]]

    return df_sim

from sklearn.preprocessing import MinMaxScaler

# 유사도 계산 (프로젝트 + 채용횟수)
def similarity(user_input, project_embeddings, df, top_n = 5, alpha = 0.3):
    user_vector = model.encode(user_input, convert_to_numpy=True)
    similarities = cosine_similarity([user_vector], project_embeddings)[0]

    # 프로젝트 유사도
    df["프로젝트 유사도"] = similarities

    # 채용횟수 반영
    scaler = MinMaxScaler()
    df["채용횟수_정규화"] = scaler.fit_transform(df[["채용횟수"]])
    df["유사도"] = df["프로젝트 유사도"] * (1 + alpha * df["채용횟수_정규화"])

    df_sim = df.sort_values("유사도", ascending=False).head(top_n)[["기업명", "주요생산품목_과제", "프로젝트 유사도", "채용횟수_정규화", "채용횟수", "유사도"]]

    return df_sim

user_input = "의료기기 유통"

display(project_similarity(user_input, ko_project_embeddings, df, top_n = 10))
display(similarity(user_input, ko_project_embeddings, df, top_n = 10))

user_input = """
UATM/UTM 분야 기술 연구개발
자체연구 외 외부기관 연구 협업 수행
항행안전시설 관련 연구개발사업
사내 ICT 분야 경력 개발 업무
직원 전문역량 강화를 위한 사내 교육 수행
"""

display(project_similarity(user_input, ko_project_embeddings, df, top_n = 10))
display(similarity(user_input, ko_project_embeddings, df, top_n = 10, alpha = 0.3))

user_input = """건물 내·외부 청소 등 미화관리 전반
미화업무 계획수립 및 각종 문서작성·보고
고난도 작업(미화장비 작동·유지관리 등)
조직관리 관리자(미화감독·팀장·반장 등)
"""

display(project_similarity(user_input, ko_project_embeddings, df, top_n = 5))
display(similarity(user_input, ko_project_embeddings, df, top_n = 5, alpha = 0.3))

user_input = "산업용 공정자동화 시스템 설계 및 센서 연동 제어"

display(project_similarity(user_input, ko_project_embeddings, df, top_n = 5))
display(similarity(user_input, ko_project_embeddings, df, top_n = 5, alpha = 0.3))

"""### 프로젝트 유사도 2 (kr-sbert)"""

!pip install sentence-transformers

import os
from sentence_transformers import SentenceTransformer, util
from sklearn.metrics.pairwise import cosine_similarity

model = SentenceTransformer("snunlp/KR-SBERT-V40K-klueNLI-augSTS")
text_list = df["주요생산품목_과제"].tolist()

embedding_file = "/content/drive/MyDrive/KUBIG/25_conference/krsbert_embeddings.npy"

# 임베딩
if os.path.exists(embedding_file):
    kr_project_embeddings = np.load(embedding_file)
else:
    project_embeddings = model.encode(text_list, convert_to_numpy=True)
    np.save(embedding_file, project_embeddings)
    print(embedding_file)

user_input = "의료기기 유통"

display(project_similarity(user_input, kr_project_embeddings, df, top_n=5))
display(similarity(user_input, kr_project_embeddings, df, top_n=5))

user_input = """
UATM/UTM 분야 기술 연구개발
자체연구 외 외부기관 연구 협업 수행
항행안전시설 관련 연구개발사업
사내 ICT 분야 경력 개발 업무
직원 전문역량 강화를 위한 사내 교육 수행
"""

display(project_similarity(user_input, kr_project_embeddings, df, top_n=10))
display(similarity(user_input, kr_project_embeddings, df, top_n=10))

user_input = """건물 내·외부 청소 등 미화관리 전반
미화업무 계획수립 및 각종 문서작성·보고
고난도 작업(미화장비 작동·유지관리 등)
조직관리 관리자(미화감독·팀장·반장 등)
"""

display(project_similarity(user_input, kr_project_embeddings, df, top_n=5))
display(similarity(user_input, kr_project_embeddings, df, top_n=5))

user_input = """산업용 공정자동화 시스템 설계 및 센서 연동 제어"""

display(project_similarity(user_input, kr_project_embeddings, df, top_n=5))
display(similarity(user_input, kr_project_embeddings, df, top_n=5))